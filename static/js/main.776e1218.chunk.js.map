{"version":3,"sources":["components/about.js","components/json-upload.js","components/diagram.js","components/stats.js","app.js","serviceWorker.js","index.js"],"names":["About","Paper","className","elevation","Typography","variant","gutterBottom","JSONUpload","Button","color","component","startIcon","accept","style","display","id","multiple","type","size","onClick","window","location","search","Diagram","Stats","useState","tableData","setTableData","json","jsonState","setJsonState","useEffect","setInterval","table","employee","tools","Object","keys","forEach","key","actors","count","price","category","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","scope","App","Container","maxWidth","Grid","container","spacing","item","xs","ButtonGroup","href","download","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","script","createElement","innerHTML","body","appendChild","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.776e1218.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <Paper className=\"paper\" elevation={0}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        ABC Project\r\n      </Typography>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        Данный проект предоставляет полные данные для расчета по методике ABC на\r\n        основе модели IDEF0 и UML CASE (в JSON формате).\r\n      </Typography>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        Модель должна быть дополнена для построения ABC таблицы.\r\n      </Typography>\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Paper, Button } from \"@material-ui/core\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\n\r\nexport default function JSONUpload() {\r\n  return (\r\n    <Paper className=\"paper json-upload\" elevation={0}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        component=\"label\"\r\n        startIcon={<DescriptionIcon />}\r\n      >\r\n        <input\r\n          accept=\".json,application/json\"\r\n          style={{ display: \"none\" }}\r\n          id=\"file\"\r\n          multiple\r\n          type=\"file\"\r\n        />\r\n        Загрузите модель в формате json\r\n      </Button>\r\n      <div id=\"test\" className=\"json-upload__sep\">\r\n        или\r\n      </div>{\" \"}\r\n      <Button\r\n        size=\"small\"\r\n        onClick={() => {\r\n          window.location.search =\r\n            \"?path=/oop-stat/test.json\";\r\n        }}\r\n      >\r\n        используйте тестовый json\r\n      </Button>\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\nexport default function Diagram() {\r\n  // Элементы разметки, в которые подключается библиотека\r\n  // построения диаграмм\r\n  return (\r\n    <Paper className=\"paper\" elevation={0}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Диаграммы\r\n      </Typography>\r\n      <div id=\"loader\"></div>\r\n      {/* Информация об ошибке */}\r\n      <div id=\"resultText\"></div>\r\n      <div id=\"preview\">\r\n        {/* Заголовок диаграммы */}\r\n        <Typography variant=\"body1\" id=\"title\" gutterBottom></Typography>\r\n        {/* Контейнер для построения */}\r\n        <div id=\"graphContainer\"></div>\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\n\r\nexport default function Stats() {\r\n  // Данные для отображения\r\n  const [tableData, setTableData] = useState();\r\n  // Данные из прикрепленного файла\r\n  const [jsonState, setJsonState] = useState(window.json);\r\n\r\n  useEffect(() => {\r\n    // Для рендеринга расчетной таблицы производится подписка \r\n    // на глобальную переменную, значение которой присваивается во время\r\n    // чтения файла\r\n    setInterval(() => {\r\n      if (window.json !== jsonState) {\r\n        setJsonState(window.json);\r\n      }\r\n    }, 300);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Обработка данных для отображения\r\n    if (jsonState) {\r\n      const table = { employee: 0, tools: 0 };\r\n      Object.keys(jsonState).forEach((key) => {\r\n        if (jsonState[key].actors) {\r\n          jsonState[key].actors.forEach(({ count, price, category }) => {\r\n            table[category] = table[category] + count * price;\r\n          });\r\n        }\r\n      });\r\n\r\n      setTableData(table);\r\n    }\r\n  }, [jsonState]);\r\n\r\n  return (\r\n    <Paper className=\"paper\" elevation={0}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Затраты\r\n      </Typography>\r\n      {tableData ? (\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Наименование</TableCell>\r\n              <TableCell align=\"right\">Затраты</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                Работники\r\n              </TableCell>\r\n              <TableCell align=\"right\">{tableData.employee} ₽</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                Инструменты\r\n              </TableCell>\r\n              <TableCell align=\"right\">{tableData.tools} ₽</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                Итого\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {tableData.employee + tableData.tools} ₽\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      ) : (\r\n        \"Для расчета затрат, прикрепите файл модели\"\r\n      )}\r\n    </Paper>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./app.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport About from \"./components/about\";\nimport JSONUpload from \"./components/json-upload\";\nimport Diagram from \"./components/diagram\";\nimport Stats from \"./components/stats\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Container maxWidth=\"md\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            {/* Информация о проекте */}\n            <About />\n          </Grid>\n          <Grid item xs={12}>\n            {/* Блок загрузки файла модели */}\n            <JSONUpload />\n          </Grid>\n          <Grid item xs={12}>\n            {/* Блок отображения диаграммы */}\n            <Diagram />\n          </Grid>\n          <Grid item xs={12}>\n            {/* Расчет стоимости ресурсов */}\n            <Stats />\n          </Grid>\n          <Grid item xs={12} className=\"bottom-btns\">\n            <ButtonGroup variant=\"text\" aria-label=\"text primary button group\">\n              <a href=\"/oop-stat/test.json\" download>\n                <Button>Скачать тестовый json</Button>\n              </a>\n            </ButtonGroup>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n  // Подключение библиотеки отрисовки диаграмм по тестовому файлу\n  // или переданному в ссылке с параметром path\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n  () => {\n    const script = document.createElement(\"script\");\n    script.innerHTML = `\n    function getParameterByName(name) {\n      var url = window.location.href;\n      var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n      if (!results) return null;\n      if (!results[2]) return \"\";\n      return decodeURIComponent(results[2]);\n    }\n\n    var loader = document.getElementById(\"loader\");\n    var preview = document.getElementById(\"preview\");\n    var resultText = document.getElementById(\"resultText\");\n    var container = document.getElementById(\"graphContainer\");\n    var title = document.getElementById(\"title\");\n    var visualizer = new Visualizer(\n      loader,\n      resultText,\n      container,\n      preview,\n      title\n    );\n    var fileEl = document.getElementById(\"file\");\n    if(fileEl) {\n      fileEl.addEventListener(\n        \"change\",\n        {\n          handleEvent: function (event) {\n            window.history.replaceState(null, null, window.location.pathname);\n            visualizer.showDiagramFromEvent(event);\n          },\n        },\n        false\n      );\n    }\n    var path = getParameterByName(\"path\");\n    if (path != null) {\n      visualizer.showDiagramFromPath(path);\n    } else {\n      visualizer.showDiagramFromPath('/oop-stat/test.json');\n    }`;\n    document.body.appendChild(script);\n  }\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}